pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'elevate-labs-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        CONTAINER_NAME = 'elevate-labs-container'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                cleanWs()
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building Docker image...'
                dir('task-1') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running tests...'
                dir('task-1') {
                    script {
                        sh "docker run --rm ${DOCKER_IMAGE}:${DOCKER_TAG} npm test"
                    }
                }
            }
            post {
                always {
                    echo 'Test stage completed'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
                script {
                    sh "docker stop ${CONTAINER_NAME} || true"
                    sh "docker rm ${CONTAINER_NAME} || true"
                    sh "docker run -d --name ${CONTAINER_NAME} -p 3000:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "sleep 10"
                    sh "curl -f http://localhost:3000/ || exit 1"
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                echo 'Cleaning up old images...'
                script {
                    sh "docker images ${DOCKER_IMAGE} --format 'table {{.Repository}}:{{.Tag}}' | tail -n +6 | xargs -r docker rmi || true"
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
            echo "Application deployed at: http://localhost:3000"
        }
        failure {
            echo 'Pipeline failed!'
            sh "docker stop ${CONTAINER_NAME} || true"
            sh "docker rm ${CONTAINER_NAME} || true"
        }
        always {
            echo 'Pipeline execution completed'
        }
    }
} 